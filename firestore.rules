rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    match /exercises/{exerciseId} {
      allow read: if isAuthenticated();

      allow create,update: if isValidExercise() && isAdmin();
      allow delete: if isAuthenticated() && isAdmin();

      match /translations/{translationId} {
        allow read: if isKnownUser();
      }

    }

    match /muscles/{doc=**} {
      allow read: if isAuthenticated();

      allow write: if isAdmin();
    }

    match /equipment/{doc=**} {
      allow read: if isAuthenticated();

      allow write: if isAdmin();
    }

    match /exercise-types/{doc=**} {
      allow read: if isAuthenticated();

      allow write: if isAdmin();
    }

    match /{path=**}/translations/{lessonId} {
      allow read: if isKnownUser();
    }

    function isAdmin() {
      return isAuthenticated() && 'admin' in request.auth.token &&
      request.auth.token.admin == true;
    }

    function isAuthenticated() {
      return request.auth.uid !=null;
    }

    function isKnownUser() {
      return isAuthenticated() &&
      exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function isValidExercise() {
      return isNonEmptyString('name') &&
      isNonEmptyString('exerciseType') &&
      isNonEmptyString('targetMuscle') &&
      isNonEmptyString('equipment') &&
      isNonEmptyString('avatarUrl') &&
      request.resource.data['rating'] is number;
    }

    function isNonEmptyString(fieldName) {
      return request.resource.data[fieldName] is string &&
      request.resource.data[fieldName].size() > 0;
    }
  }
}
