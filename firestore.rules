rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    match /exercises/{exerciseId} {
      allow read: if withValidOwnershipForReads('exercise');

      allow create: if isValidExercise();
      allow update: if withValidAccessOwnershipForWrites('exercise') && isValidExercise();
      allow delete: if withValidAccessOwnershipForWrites('exercise');

      match /translations/{translationId} {
        allow read: if withValidAccessToTranslationReads(database, 'exercises', exerciseId); // TODO: verify tomorrow
        allow write: if isAdmin();
      }
    }

    match /workouts/{workoutId} {
      allow read: if withValidOwnershipForReads('workout');

      allow create: if isValidWorkout();
      allow update: if withValidAccessOwnershipForWrites('workout') && isValidWorkout();
      allow delete: if withValidAccessOwnershipForWrites('workout');
    }

    function withValidAccessToTranslationReads(database, collectionName, docId) {
      let exerciseData = get(/databases/$(database)/documents/$(collectionName)/$(docId)).data.baseData;

      return isAdmin() && exerciseData.admin == true || (isKnownUser() && exerciseData.userId == request.auth.uid) || exerciseData.admin == true;
    }

    function isAdmin() {
      return isAuthenticated() && 'admin' in request.auth.token &&
      request.auth.token.admin == true;
    }

    function isAuthenticated() {
      return request.auth.uid !=null;
    }

    function isKnownUser() {
      return isAuthenticated() &&
      exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function isValidExercise() {
      let baseData = request.resource.data.baseData;
      let translatableData = request.resource.data.translatableData;

      return isNonEmptyString(translatableData.name) &&
      isNonEmptyString(baseData.exerciseType) &&
      isNonEmptyString(baseData.targetMuscle) &&
      isNonEmptyString(baseData.equipment) &&
      isNonEmptyString(baseData.avatarUrl) &&
      isNonEmptyString(baseData.avatarSecondaryUrl) &&
      translatableData.instructions is string &&
      isRequestOwnershipValid('exercise');
    }

    function isValidWorkout() {
      let data =  request.resource.data;

      return isNonEmptyString(data.name) &&
      isNonEmptyList(data.targetMuscles) &&
      isNonEmptyString(data.coverUrl) &&
      isNonEmptyString(data.avatarUrl) &&
      isNonEmptyString(data.level) &&
      isNonEmptyList(data.content) &&
      isRequestOwnershipValid('workout');
    }

    function isNonEmptyString(val) {
      return val is string && val.size() > 0;
    }

    function isNonEmptyList(val) {
      return val is list && val.size() > 0;
    }

    function isRequestOwnershipValid(type) {
      let requestAdmin = type == 'workout' ? request.resource.data.admin : request.resource.data.baseData.admin;
      let requestUserId = type == 'workout' ? request.resource.data.userId : request.resource.data.baseData.userId;

      let isValidForAdmin = isAdmin() && requestAdmin == true && requestUserId == null;
      let isValidForUser = isKnownUser() && requestAdmin == false && requestUserId == request.auth.uid;

      return isValidForAdmin || isValidForUser;
    }

    function withValidAccessOwnershipForWrites(type) {
      return isOwnedByAdmin(type) || isOwnedByUser(type);
    }

    function withValidOwnershipForReads(type) {
      return isOwnedByAdmin(type) || isOwnedByUser(type) || isPublicResource(type);
    }

    function isOwnedByAdmin(type) {
      return isAdmin() && isAdminResource(type);
    }

    function isPublicResource(type) {
       let resourceAdmin = type == 'workout' ? resource.data.admin : resource.data.baseData.admin;

      return isAuthenticated() && resourceAdmin == true;
    }

    function isOwnedByUser(type) {
      let resourceUserId = type == 'workout' ? resource.data.userId : resource.data.baseData.userId;

      return isKnownUser() && request.auth.uid == resourceUserId;
    }

    function isAdminResource(type) {
      let isAdmin = type == 'workout' ? resource.data.admin : resource.data.baseData.admin;

      return isAdmin == true;
    }
  }
}
